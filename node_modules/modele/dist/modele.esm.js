function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * Class representing a model property errors.
 */
var Errors =
/*#__PURE__*/
function () {
  /**
   * Create a Errors
   *
   * @param  {Object} props - Properties to be initialized.
   */
  function Errors() {
    var _this = this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, Errors);

    this.items = {};
    props.forEach(function (item) {
      return _this.set(item, []);
    });
  }
  /**
   * Add an error to an property.
   *
   * @param {string} prop
   * @param {*} data
   */


  _createClass(Errors, [{
    key: "add",
    value: function add(prop, data) {
      this.items[prop].push(data);
    }
    /**
     * Returns true if has any error to given property or all of them.
     *
     * @param  {string} prop
     * @return {Boolean}
     */

  }, {
    key: "any",
    value: function any(prop) {
      var _this2 = this;

      if (prop) {
        return this.items[prop].length > 0;
      }

      return Object.keys(this.items).some(function (prop) {
        return _this2.any(prop);
      });
    }
    /**
     * Clear all errors.
     */

  }, {
    key: "clear",
    value: function clear() {
      for (var prop in this.items) {
        this.items[prop] = [];
      }
    }
    /**
     * Returns true if has no errors to given property or any of them.
     *
     * @param  {string} prop
     * @return {Boolean}
     */

  }, {
    key: "empty",
    value: function empty(prop) {
      var _this3 = this;

      if (prop) {
        return this.items[prop].length === 0;
      }

      return Object.keys(this.items).every(function (prop) {
        return _this3.empty(prop);
      });
    }
    /**
     * Set property errors
     *
     * @param {string} prop
     * @param {Array} data
     */

  }, {
    key: "set",
    value: function set(prop, data) {
      this.items[prop] = data;
    }
  }]);

  return Errors;
}();

/**
 * Class representing a form object with Resourceful API.
 */

var Model =
/*#__PURE__*/
function () {
  /**
   * Create a Model
   *
   * @param {Object} attributes
   */
  function Model(attributes) {
    _classCallCheck(this, Model);

    var validations = this.constructor.validation();
    Object.assign(this, attributes); // private properties that should be ignored at toJSON

    this.$errors = new Errors(Object.keys(validations));
    this.$pending = false;
    this.$rules = validations;
  } // REGION Interfaces

  /**
   * Retuns a set of custom options.
   *
   */


  _createClass(Model, [{
    key: "$mutated",
    // REGION Instance Methods

    /**
     * Returns the value of the property, with mutations applied, if present.
     *
     * @param {String} prop - Property
     * @return {*}
     */
    value: function $mutated(prop) {
      var mutations = this.constructor.mutations();
      var value = this[prop];
      return mutations[prop] ? mutations[prop](value) : value;
    }
    /**
     * Validate each property based on tests specified at `Model.validation`.
     *
     * @return {Boolean} Retuns true if has no errors, otherwise false.
     */

  }, {
    key: "$validate",
    value: function $validate() {
      var _this = this;

      return Object.keys(this.$errors.items).map(function (prop) {
        return _this.$validateProp(prop);
      }).every(function (validation) {
        return validation;
      });
    }
    /**
     * Validate a property based on tests specified at `Model.validation`.
     *
     * @param {string} attribute
     * @return {Boolean} Retuns true if has no errors, otherwise false.
     */

  }, {
    key: "$validateProp",
    value: function $validateProp(prop) {
      var _this2 = this;

      var rules = this.$rules[prop] || [];
      var json = this.toJSON();
      this.$errors.set(prop, rules.filter(function (rule) {
        return (// Rule conditional
          (!rule.condition || rule.condition(_this2)) && // Rule test
          !rule.test(json[prop], json, prop)
        );
      }).map(function (_ref) {
        var name = _ref.name,
            data = _ref.data;
        return {
          name: name,
          data: data,
          json: json,
          prop: prop,
          origin: 'client'
        };
      }));
      return this.$errors.empty(prop);
    }
    /**
     * Sets the "pending" status to `true` until promise is completed.
     *
     * @param {Promise} promise
     */

  }, {
    key: "$wait",
    value: function $wait(promise) {
      var _this3 = this;

      this.$pending = true;
      return promise.then(function (result) {
        _this3.$pending = false;
        return result;
      })["catch"](function (error) {
        _this3.$pending = false;
        throw error;
      });
    }
    /**
     * Returns a plain object with mutated properties.
     *
     * @return {Object}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var _this4 = this;

      var mutations = this.constructor.mutations();
      var record = {};
      Object.keys(this).filter(function (prop) {
        return !prop.startsWith('$');
      }).forEach(function (prop) {
        var value = _this4[prop];
        record[prop] = mutations[prop] ? mutations[prop](value) : value;
      });
      return record;
    }
  }], [{
    key: "setup",
    value: function setup() {
      return {};
    }
    /**
     * Returns an object mapping property names to their mutator functions.
     *
     */

  }, {
    key: "mutations",
    value: function mutations() {
      return {};
    }
    /**
     * Should be overridden to implement server request and should return an
     * Promise. Use `fetch` or `axios`, for example.
     *
     */

  }, {
    key: "request",
    value: function request(config) {
      throw new Error('You must declare static request(config) method.');
    }
    /**
     * Returns an object mapping property names to their validations (Array).
     *
     */

  }, {
    key: "validation",
    value: function validation() {
      return {};
    } // REGION Static Methods

    /**
     * Retuns a set of model default options, merged with custom options
     * defined at `static setup()`.
     *
     */

  }, {
    key: "options",
    value: function options() {
      var defaults = {
        baseURL: '[/:id]',
        verbs: {
          get: 'GET',
          create: 'POST',
          update: 'PUT',
          "delete": 'DELETE'
        }
      };
      return _objectSpread2({}, defaults, {}, this.setup());
    }
    /**
     * Returns the url with replaced variables and appended parameters.
     *
     * @param {Object} [parameters]
     * @param {Object} [variables]
     * @return {String}
     */

  }, {
    key: "url",
    value: function url(parameters) {
      var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _this$options = this.options(),
          baseURL = _this$options.baseURL;

      var query = this.toQuery(parameters);
      return baseURL.replace(/\[\/:(\w+)\]/g, function (_, group) {
        return variables[group] ? '/' + variables[group] : '';
      }).replace(/:(\w+)/g, function (match, group) {
        return variables[group] || match;
      }).concat(query && query.length ? '?' + query : '');
    }
    /**
     * Retuns a string representing URL Parameters of given params.
     *
     * @param {Object} parameters
     * @return {String}
     */

  }, {
    key: "toQuery",
    value: function toQuery(parameters) {
      return parameters && new URLSearchParams(parameters).toString();
    }
    /**
     * Call `request` to fetch resources.
     *
     * @param {Object} [parameters]
     * @param {Object} [variables]
     * @return {Promise}
     */

  }, {
    key: "get",
    value: function get(parameters, variables) {
      var _this$options2 = this.options(),
          verbs = _this$options2.verbs;

      return this.request({
        method: verbs.get,
        url: this.url(parameters, variables)
      });
    }
    /**
     * Call `request` to post a resource.
     *
     * @param {Object} data
     * @param {Object} [variables] - URL variables.
     * @return {Promise}
     */

  }, {
    key: "create",
    value: function create(data, variables) {
      var _this$options3 = this.options(),
          verbs = _this$options3.verbs;

      return this.request({
        method: verbs.create,
        url: this.url({}, variables),
        data: data
      });
    }
    /**
     * Call `request` to post a resource.
     *
     * @param {Object} data
     * @param {Object} [variables] - URL variables.
     * @return {Promise}
     */

  }, {
    key: "update",
    value: function update(data, variables) {
      var _this$options4 = this.options(),
          verbs = _this$options4.verbs;

      return this.request({
        method: verbs.update,
        url: this.url({}, variables),
        data: data
      });
    }
    /**
     * Call `request` to delete a resource.
     *
     * @param {Object} [variables] - URL variables.
     * @return {Promise}
     */

  }, {
    key: "delete",
    value: function _delete(variables) {
      var _this$options5 = this.options(),
          verbs = _this$options5.verbs;

      return this.request({
        method: verbs["delete"],
        url: this.url({}, variables)
      });
    }
  }]);

  return Model;
}();

var Rule =
/*#__PURE__*/
function () {
  function Rule(_ref) {
    var name = _ref.name,
        test = _ref.test,
        data = _ref.data;

    _classCallCheck(this, Rule);

    this.name = name;
    this.test = test;
    this.data = data;
  }
  /**
   * Chain method that sets rule condition.
   *
   * @param {function} condition
   * @return {Object} this
   */


  _createClass(Rule, [{
    key: "if",
    value: function _if(condition) {
      this.condition = condition;
      return this;
    }
  }]);

  return Rule;
}();

export { Model as Modele, Rule };
