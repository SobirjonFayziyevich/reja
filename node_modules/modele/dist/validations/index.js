'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var Rule =
/*#__PURE__*/
function () {
  function Rule(_ref) {
    var name = _ref.name,
        test = _ref.test,
        data = _ref.data;

    _classCallCheck(this, Rule);

    this.name = name;
    this.test = test;
    this.data = data;
  }
  /**
   * Chain method that sets rule condition.
   *
   * @param {function} condition
   * @return {Object} this
   */


  _createClass(Rule, [{
    key: "if",
    value: function _if(condition) {
      this.condition = condition;
      return this;
    }
  }]);

  return Rule;
}();

var isEmpty = function isEmpty(value) {
  return (// null or undefined
    value == null || // has length and it's zero
    value.length === 0 || // is an Object and has no keys
    _typeof(value) === 'object' && Object.keys(value).length === 0
  );
};
/**
 * Returns a rule that test if value is null, zero-length or has no keys.
 *
 * @return {Object} Rule instance.
 */


function absence() {
  return new Rule({
    name: 'absence',
    test: function test(value) {
      return isEmpty(value);
    }
  });
}
/**
 * Returns a rule that test if value is truthy.
 *
 * @return {Object} Rule instance.
 */

function acceptance() {
  return new Rule({
    name: 'acceptance',
    test: function test(value) {
      return !!value;
    }
  });
}
/**
 * Returns a rule that test if value is equal to `other`.
 *
 * @return {Object} Rule instance.
 */

function confirmation(other) {
  return new Rule({
    name: 'confirmation',
    test: function test(value, record) {
      return value === record[other];
    },
    data: {
      other: other
    }
  });
}
/**
 * Returns a rule that test if value is greater than `start` date.
 *
 * @return {Object} Rule instance.
 */

function dateAfter(start) {
  return new Rule({
    name: 'dateAfter',
    test: function test(value) {
      return value > start();
    },
    data: {
      start: start
    }
  });
}
/**
 * Returns a rule that test if value is lower than `end` date.
 *
 * @return {Object} Rule instance.
 */

function dateBefore(end) {
  return new Rule({
    name: 'dateBefore',
    test: function test(value) {
      return value < end();
    },
    data: {
      end: end
    }
  });
}
/**
 * Returns a rule that test if value is between `start` and `end`.
 *
 * @return {Object} Rule instance.
 */

function dateBetween(start, end) {
  return new Rule({
    name: 'dateBetween',
    test: function test(value) {
      return value > start() && value < end();
    },
    data: {
      start: start,
      end: end
    }
  });
}
/**
 * Returns a rule that test if value is not included into `list`.
 *
 * @return {Object} Rule instance.
 */

function exclusion(list) {
  return new Rule({
    name: 'exclusion',
    test: function test(value) {
      return !list.includes(value);
    },
    data: {
      list: list
    }
  });
}
/**
 * Returns a rule that test if value matches with `regexp`.
 *
 * @return {Object} Rule instance.
 */

function format(regexp) {
  return new Rule({
    name: 'format',
    test: function test(value) {
      return regexp.test(value);
    },
    data: {
      regexp: regexp
    }
  });
}
/**
 * Returns a rule that test if value is future.
 *
 * @return {Object} Rule instance.
 */

function future(regexp) {
  return new Rule({
    name: 'future',
    test: function test(value) {
      return value > new Date();
    }
  });
}
/**
 * Returns a rule that test if value is included into `list`.
 *
 * @return {Object} Rule instance.
 */

function inclusion(list) {
  return new Rule({
    name: 'inclusion',
    test: function test(value) {
      return list.includes(value);
    },
    data: {
      list: list
    }
  });
}
/**
 * Returns a rule that test if value's length is between `min` and `max`.
 *
 * @return {Object} Rule instance.
 */

function lengthBetween(min, max) {
  return new Rule({
    name: 'lengthBetween',
    test: function test(value) {
      return value.length >= min && value.length <= max;
    },
    data: {
      min: min,
      max: max
    }
  });
}
/**
 * Returns a rule that test if value's length is equal to `size`.
 *
 * @return {Object} Rule instance.
 */

function lengthIs(size) {
  return new Rule({
    name: 'lengthIs',
    test: function test(value) {
      return value.length === size;
    },
    data: {
      size: size
    }
  });
}
/**
 * Returns a rule that test if value's length is lower than or equal to `max`.
 *
 * @return {Object} Rule instance.
 */

function lengthMax(max) {
  return new Rule({
    name: 'lengthMax',
    test: function test(value) {
      return value.length <= max;
    },
    data: {
      max: max
    }
  });
}
/**
 * Returns a rule that test if value's length is greater than or equal to `min`
 *
 * @return {Object} Rule instance.
 */

function lengthMin(min) {
  return new Rule({
    name: 'lengthMin',
    test: function test(value) {
      return value.length >= min;
    },
    data: {
      min: min
    }
  });
}
/**
 * Returns a rule that test if value is past.
 *
 * @return {Object} Rule instance.
 *
 */

function past(min) {
  return new Rule({
    name: 'past',
    test: function test(value) {
      return value < new Date();
    }
  });
}
/**
 * Returns a rule that test if value is not null, has length greater than zero or has keys.
 *
 * @return {Object} Rule instance.
 */

function presence(min) {
  return new Rule({
    name: 'presence',
    test: function test(value) {
      return !isEmpty(value);
    }
  });
}

exports.absence = absence;
exports.acceptance = acceptance;
exports.confirmation = confirmation;
exports.dateAfter = dateAfter;
exports.dateBefore = dateBefore;
exports.dateBetween = dateBetween;
exports.exclusion = exclusion;
exports.format = format;
exports.future = future;
exports.inclusion = inclusion;
exports.lengthBetween = lengthBetween;
exports.lengthIs = lengthIs;
exports.lengthMax = lengthMax;
exports.lengthMin = lengthMin;
exports.past = past;
exports.presence = presence;
